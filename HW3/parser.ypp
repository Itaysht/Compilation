%{
    #include "node.cpp"
    #define YYSTYPE Node*
    #include "hw3_output.hpp"
    #include <stack>
    int yylex();
    void yyerror(const char*);
    bool isTheIdExist(Table* tb, string name);
    bool checkThereIsWhile(Table* tb);
    Types getMeItsType(Table* tb, string name);
    using namespace output;
    stack<Table*> tables_st = stack<Table*>();
    stack<int> offset_st = stack<int>();
%}

%right ASSIGN
%left OR
%left AND
%left RELOPSECOND
%left RELOPFIRST
%left BINOPSECOND
%left BINOPFIRST
%right NOT
%token LBRACE
%token RBRACE
%right LPAREN
%right RPAREN

%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%token IF
%right ELSE
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token ID
%token NUM
%token STRING

%%

Program:       Starter Statements
                {
                    output::endScope();
                    tables_st.top()->printThisTable();
                    tables_st.pop();
                    offset_st.pop();
                }
;
Starter:       {
                    Table* first = new Table(nullptr);
                    first->addToTable("print", T_STRING_TO_VOID, 0);
                    first->addToTable("printi", T_INT_TO_VOID, 0);
                    first->addToTable("readi", T_INT_TO_INT, 0);
                    tables_st.push(first);
                    offset_st.push(0);
               }
;
Statements:     Statement
              | Statements Statement
;
Statement:      LBRACE IfFirst Statements RBRACE
              {
                output::endScope();
                tables_st.top()->printThisTable();
                tables_st.pop();
                offset_st.pop();
              }
              | Type ID SC
              {
                if (isTheIdExist(tables_st.top(), $2->name)){
                    output::errorDef($3->line_number, $2->name);
                    exit(0);
                }
                if (($2->name == "readi") || ($2->name == "printi") || ($2->name == "print")){
                    output::errorDef($2->line_number, $2->name);
                    exit(0);
                }
                $2->type = $1->type;
                tables_st.top()->addToTable($2->name, $2->type, offset_st.top());
                int get_out_then_in = offset_st.top();
                offset_st.pop();
                offset_st.push(get_out_then_in+1);
              }
              | Type ID ASSIGN Exp SC
              {
                if (isTheIdExist(tables_st.top(), $2->name)){
                    output::errorDef($3->line_number, $2->name);
                    exit(0);
                }
                if ($4->is_id){
                    if (!(isTheIdExist(tables_st.top(), $4->name))){
                        output::errorUndef($4->line_number, $4->name);
                        exit(0);
                    }
                }
                if ($1->type != $4->type){
                    if (!(($1->type == T_INT) && ($4->type == T_BYTE))){
                        output::errorMismatch($4->line_number);
                        exit(0);
                    }
                }
                $2->type = $1->type;
                $2->is_id = true;
                tables_st.top()->addToTable($2->name, $2->type, offset_st.top());
                int get_out_then_in = offset_st.top();
                offset_st.pop();
                offset_st.push(get_out_then_in+1);
              }
              | ID ASSIGN Exp SC
              {
                if (!(isTheIdExist(tables_st.top(), $1->name))){
                    output::errorUndef($3->line_number, $1->name);
                    exit(0);
                }
                if ($3->is_id){
                    if (!(isTheIdExist(tables_st.top(), $3->name))){
                        output::errorUndef($3->line_number, $3->name);
                        exit(0);
                    }
                }
                $1->type = getMeItsType(tables_st.top(), $1->name);
                if ($1->type != $3->type){
                    if (!(($1->type == T_INT) && ($3->type == T_BYTE))){
                        output::errorMismatch($1->line_number);
                        exit(0);
                    }
                }
              }
              | Call SC
              | RETURN SC
              | IF LPAREN IfFirst Exp RPAREN IfSecond Statement
                {
                    output::endScope();
                    tables_st.top()->printThisTable();
                    tables_st.pop();
                    offset_st.pop();
                }
              | IF LPAREN IfFirst Exp RPAREN IfSecond Statement ELSE IfThird Statement
                {
                    output::endScope();
                    tables_st.top()->printThisTable();
                    tables_st.pop();
                    offset_st.pop();
                }
              | WHILE LPAREN IfWhile Exp RPAREN IfSecond Statement
                {
                    output::endScope();
                    tables_st.top()->printThisTable();
                    tables_st.pop();
                    offset_st.pop();
                }
              | BREAK SC
                {
                    if (!(checkThereIsWhile(tables_st.top()))){
                        output::errorUnexpectedBreak($1->line_number);
                        exit(0);
                    }
                }
;
              | CONTINUE SC
                {
                    if (!(checkThereIsWhile(tables_st.top()))){
                        output::errorUnexpectedContinue($1->line_number);
                        exit(0);
                    }
                }
;
Call:           ID LPAREN Exp RPAREN
                {
                    bool isInStack = false;
                    if (!(($1->name == "print") || ($1->name == "printi") || ($1->name == "readi"))){
                        output::errorUndefFunc($1->line_number, $1->name);
                        exit(0);
                    }
                    if (isTheIdExist(tables_st.top(), $3->name)){ //unrecognized in the current stack
                        isInStack = true;
                        $3->type = getMeItsType(tables_st.top(), $3->name);
                    }
                    if ($1->name == "print"){
                        if (isInStack){
                            if ($3->type != T_STRING) {
                                output::errorPrototypeMismatch($1->line_number, $1->name,
                                                               output::bringMeType(T_STRING));
                                exit(0);
                            }
                        }
                        else{
                            if ($3->is_id) {
                                output::errorUndef($3->line_number, $3->name);
                                exit(0);
                            }
                            if ($3->type != T_STRING) {
                                output::errorPrototypeMismatch($1->line_number, $1->name,
                                                               output::bringMeType(T_STRING));
                                exit(0);
                            }
                        }
                        $$->type = T_VOID;
                    }
                    else if ($1->name == "printi"){
                    if (isInStack){
                        if (($3->type != T_INT) && ($3->type != T_BYTE)) {
                            output::errorPrototypeMismatch($1->line_number, $1->name,
                                                           output::bringMeType(T_INT));
                            exit(0);
                        }
                    }
                    else{
                        if ($3->is_id) {
                            output::errorUndef($3->line_number, $3->name);
                            exit(0);
                        }
                        if (($3->type != T_INT) && ($3->type != T_BYTE)) {
                            output::errorPrototypeMismatch($1->line_number, $1->name,
                                                           output::bringMeType(T_INT));
                            exit(0);
                        }
                    }
                        $$->type = T_VOID;
                    }
                    else if ($1->name == "readi"){
                    if (isInStack){
                        if (($3->type != T_INT) && ($3->type != T_BYTE)) {
                            output::errorPrototypeMismatch($1->line_number, $1->name,
                                                           output::bringMeType(T_INT));
                            exit(0);
                        }
                    }
                    else{
                        if ($3->is_id) {
                            output::errorUndef($3->line_number, $3->name);
                            exit(0);
                        }
                        if (($3->type != T_INT) && ($3->type != T_BYTE)) {
                            output::errorPrototypeMismatch($1->line_number, $1->name,
                                                           output::bringMeType(T_INT));
                            exit(0);
                        }
                    }
                        $$->type = T_INT;
                    }
                }
;
IfFirst:        {
                    Table* tb = new Table(tables_st.top());
                    tables_st.push(tb);
                    offset_st.push(offset_st.top());
                }
;
IfWhile:        {
                    Table* tb = new Table(tables_st.top());
                    tb->setIsWhile(true);
                    tables_st.push(tb);
                    offset_st.push(offset_st.top());
                }
;
IfSecond:       {
                    if (($-1)->type != T_BOOL){
                    output::errorMismatch(($-1)->line_number);
                    exit(0);
                    }
                }
IfThird:        {
                    output::endScope();
                    tables_st.top()->printThisTable();
                    tables_st.pop();
                    offset_st.pop();
                    Table* tb = new Table(tables_st.top());
                    tables_st.push(tb);
                    offset_st.push(offset_st.top());
                }
;
Type:           INT
              {
                $$->type = T_INT;
              }
              | BYTE
              {
                $$->type = T_BYTE;
              }
              | BOOL
              {
                $$->type = T_BOOL;
              }
;
Exp:            LPAREN Exp RPAREN
              {
                  $$->type = $2->type;
                  $$->is_id = false;
              }
              | Exp BINOPSECOND Exp
              {
                $$->is_id = false;
                if ((!(($1->type == T_INT) || ($1->type == T_BYTE))) ||
                        (!(($3->type == T_INT) || ($3->type == T_BYTE)))){
                    output::errorMismatch($1->line_number);
                    exit(0);
                }
                if (($1->type == T_INT) || ($3->type == T_INT)){
                    $$->type = T_INT;
                }
                else{
                    $$->type = T_BYTE;
                }
              }
              | Exp BINOPFIRST Exp
              {
                $$->is_id = false;
                if ((!(($1->type == T_INT) || ($1->type == T_BYTE))) ||
                        (!(($3->type == T_INT) || ($3->type == T_BYTE)))){
                    output::errorMismatch($1->line_number);
                    exit(0);
                }
                if (($1->type == T_INT) || ($3->type == T_INT)){
                    $$->type = T_INT;
                }
                else{
                    $$->type = T_BYTE;
                }
              }
              | ID
              {
                  if (isTheIdExist(tables_st.top(), $1->name)){
                      $$->type = getMeItsType(tables_st.top(), $1->name);
                  }
                  $$->name = $1->name;
                  $$->is_id = true;
              }
              | Call
                {
                    $$->type = $1->type;
                }
              | NUM
              {
                $$->type = T_INT;
                $$->name = $1->name;
              }
              | NUM B
              {
                if (stoi($1->name) > 255){
                    output::errorByteTooLarge($1->line_number, $1->name);
                    exit(0);
                }
                $$->type = T_BYTE;
                $$->name = $1->name;
              }
              | STRING
              {
                $$->type = T_STRING;
              }
              | TRUE
              {
                $$->type = T_BOOL;
              }
              | FALSE
              {
                $$->type = T_BOOL;
              }
              | NOT Exp
              {
                if ($2->type != T_BOOL){
                    output::errorMismatch($2->line_number);
                    exit(0);
                }
                $$->is_id = false;
                $$->type = T_BOOL;
              }
              | Exp AND Exp
              {
                if (!(($1->type == T_BOOL) && ($3->type == T_BOOL))){
                    output::errorMismatch($1->line_number);
                    exit(0);
                }
                $$->is_id = false;
                $$->type = T_BOOL;
              }
              | Exp OR Exp
              {
                if (!(($1->type == T_BOOL) && ($3->type == T_BOOL))){
                    output::errorMismatch($1->line_number);
                    exit(0);
                }
                $$->is_id = false;
                $$->type = T_BOOL;
              }
              | Exp RELOPFIRST Exp
              {
                if ((!(($1->type == T_INT) || ($1->type == T_BYTE))) ||
                        (!(($3->type == T_INT) || ($3->type == T_BYTE)))){
                    output::errorMismatch($1->line_number);
                    exit(0);
                }
                $$->is_id = false;
                $$->type = T_BOOL;
              }
              | Exp RELOPSECOND Exp
              {
                if ((!(($1->type == T_INT) || ($1->type == T_BYTE))) ||
                        (!(($3->type == T_INT) || ($3->type == T_BYTE)))){
                    output::errorMismatch($1->line_number);
                    exit(0);
                }
                $$->is_id = false;
                $$->type = T_BOOL;
              }
              | LPAREN Type RPAREN Exp {
                  if ($2->type == $4->type){
                      $$->type = $2->type;
                  }
                  else if (($2->type == T_INT) && ($4->type == T_BYTE)){
                      $$->type = $2->type;
                  }
                  else if (($2->type == T_BYTE) && ($4->type == T_INT)){
                      $$->type = $2->type;
                  }
                  else{
                      output::errorMismatch($1->line_number);
                      exit(0);
                  }
                  $$->name = $4->name;
              }
;
%%

bool isTheIdExist(Table* tb, string name){
    Table* temp_tb = tb;
    while (temp_tb != nullptr){
        if (temp_tb->isExistId(name)){
            return true;
        }
        temp_tb = temp_tb->myFather();
    }
    return false;
}
Types getMeItsType(Table* tb, string name){
    Table* temp_tb = tb;
    while (temp_tb != nullptr){
        if (temp_tb->isExistId(name)){
            return temp_tb->getMeType(name);
        }
        temp_tb = temp_tb->myFather();
    }
    return T_NONE;
}
bool checkThereIsWhile(Table* tb){
    Table* temp_tb = tb;
    while (temp_tb != nullptr){
        if (temp_tb->getIsWhile()){
            return true;
        }
        temp_tb = temp_tb->myFather();
    }
    return false;
}

void yyerror(const char* something){
    output::errorSyn(yylval->line_number);
    exit(0);
}

int main(){
    return yyparse();
}